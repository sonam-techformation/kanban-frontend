"use client";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import ReactQueryProvider from "@/lib/react-query-provider";
import { ThemeProvider } from "next-themes";
import { SocketProvider } from "@/context/socketContext";
import { AuthProvider } from "@/context/authContext";
import { useEffect, useState } from "react";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Kanban Board",
//   description: "Generated by create next app",
//   manifest: "manifest.json",
//   icons: [
//     {
//       rel: "icon",
//       url: "/src/app/favicon.ico",
//     },
//     {
//       rel: "apple-touch-icon",
//       url: "/src/app/favicon.ico",
//     },
//   ],
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isHydrated, setIsHydrated] = useState(false);

  useEffect(() => {
    // This will run only on the client side
    setIsHydrated(true);
  }, []);
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <title>Kanban Board</title>
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {isHydrated ? (
          <AuthProvider>
            <ThemeProvider
              attribute="class"
              enableSystem={true}
              defaultTheme="system"
              storageKey="theme"
            >
              <ReactQueryProvider>
                <SocketProvider>{children}</SocketProvider>
              </ReactQueryProvider>
            </ThemeProvider>
          </AuthProvider>
        ) : (
          <div />
        )}
      </body>
    </html>
  );
}
